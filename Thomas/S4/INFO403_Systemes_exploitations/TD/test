// EXERCICE 1
int main(int argc, char* argv[]){
  int i;
  pid_t p,f;
  printf("Père %d",getpid());
  for(i=0 ; i<10 ; i++){
    if((p=fork())==0){
      printf("Fils %i\n",getpid());
      for(i=0 ; i<10 ; i++){
        if((f=fork())==0){
          printf("Petit fils %i\n",getpid());
          exit(0);
        }
      }
      exit(0);
    }
  }
  exit(0);)
}

// QUESTION 2
int main(int argc, char* argv[]){
  int i;
  pid_t p,f;
  printf("Père %d",getpid());
  for(i=0 ; i<10 ; i++){
    if((p=fork())==0){
      printf("Fils %i\n",getpid());
      for(i=0 ; i<10 ; i++){
        if((f=fork())==0){
          printf("Petit fils %i\n",getpid());
          exit(0);
        }
      }
      exit(0);
    }
    wait(NULL);
  }
  exit(0);
}

// QUESTION 3
int main(int argc, char* argv[]){
  int i;
  pid_t p,f;
  printf("Père %d",getpid());
  for(i=0 ; i<10 ; i++){
    if((p=fork())==0){
      printf("Fils %i\n",getpid());
      for(i=0 ; i<10 ; i++){
        if((f=fork())==0){
          printf("Petit fils %i\n",getpid());
          exit(0);
        }
        wait(NULL);
      }
      exit(0);
    }
    wait(NULL);
  }
  exit(0);
}

// EXERICE 2
int main(int argc, char* argv[]){
  int nb = atoi(argv[1]);
  pid_t *p = (pid_t)malloc(nb*sizeof(pid_t));
  for(int i=0 ; i<nb ; i++){
    if((p[i]=fork())==0){

      exit(0);
    }
    for(i=0 ; i<nb ; i++){
      t = wait(NULL);
      printf("%d terminaison\n",t);
    }
    free(p);
    exit(0)
  }
}

// EXERCICE 3
